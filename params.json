{"name":"Grapnel.js","tagline":"Simple, lightweight JavaScript Routerâ€”3.4kb minified!","body":"Grapnel.js\r\n==========\r\n\r\nSimple, lightweight JavaScript Router\r\n\r\n# Features &amp; Basic Usage\r\n\r\n## Router\r\n\r\n```javascript\r\nvar router = new Grapnel.Router();\r\n\r\nrouter.get('products/:id?', function(req){\r\n    var id = req.params.id;\r\n    // GET http://mysite.com/#products/134\r\n    console.log(id);\r\n    // => 134\r\n});\r\n```\r\n\r\n## Basic URL Hook\r\n\r\n```javascript\r\nvar hook = new Grapnel(':');\r\n\r\nhook.add('show', function(value, params, event){\r\n    // GET http://mysite.com/products#show:widgets\r\n    console.log('Showing: %s', this.value);\r\n    // => \"Showing: widgets\"\r\n});\r\n```\r\n\r\n## Named Parameters\r\nGrapnel.js supports regex style routes similar to Sinatra or Express. The properties are mapped to the parameters in the request.\r\n```javascript\r\nrouter.get('products/:id?', function(req){\r\n    // GET /file.html#products/134\r\n    req.params.id\r\n    // => 134\r\n});\r\n\r\nrouter.get('products/*', function(req){\r\n    // The wildcard/asterisk will match anything after that point in the URL\r\n    // Parameters are provided req.params using req.params[n], where n is the nth capture\r\n});\r\n```\r\n\r\n## RegExp Support\r\n\r\nGrapnel.js allows RegEx when defining a route, a hook, or a new action:\r\n\r\n```javascript\r\nvar expression = /are/gi;\r\nvar hook = new Grapnel(expression);\r\n\r\nhook.add(/tacos/gi, function(value, params, event){\r\n    // GET http://mysite.com/page#tacosaregood\r\n    console.log('Someone thinks %s are %s.', this.action, this.value);\r\n    // => \"Someone thinks tacos are good.\"\r\n});\r\n```\r\n\r\n&nbsp;\r\n\r\n***\r\n\r\n# Documentation\r\n\r\n## Basic Configuration\r\n```javascript\r\n// First argument can be a String or RegEx (Defaults to: \":\")\r\nvar hook = new Grapnel();\r\n```\r\nThis is the basic configuration for Grapnel.js which allows for basic hash key/value event handling. Routing can be enabled by calling `new Grapnel.Router()`\r\n\r\n## Routing\r\nGrapnel.js allows URL hash routing. This also enables `get` method\r\n```javascript\r\nvar router = new Grapnel.Router();\r\n```\r\n\r\n## Methods\r\n##### `get` Adds a new route listener\r\n```javascript\r\n/**\r\n * @param {String|RegExp} path\r\n * @param {Function} callback\r\n*/\r\nrouter.get('store/:category/:id?', function(req, event){\r\n    var category = req.params.category,\r\n        id = req.params.id;\r\n\r\n    console.log('Product #%s in %s', id, category);\r\n});\r\n```\r\n\r\n##### `add` Adds a new basic key/value hook\r\n```javascript\r\n/**\r\n * @param {String|RegExp} action\r\n * @param {Function} callback\r\n*/\r\nhook.add('find', function(value, action, event){\r\n    // this.matches();\r\n    // this.anchor.set('something');\r\n    // this.anchor.clear();\r\n    console.log('Finding %s', this.value);\r\n});\r\n```\r\n\r\n##### `on` Adds a new event listener\r\n```javascript\r\n/**\r\n * @param {String|Array} event\r\n * @param {Function} callback\r\n*/\r\nhook.on('change', function(event){\r\n    console.log('Grapnel.js works!');\r\n});\r\n```\r\n##### `bind` An alias of `on`\r\n##### `matches` Return array of matching action listeners\r\n##### `parse` Reparse URL\r\n##### `anchor`\r\n* `defaultHash` Static anchor during initialization\r\n* `set` Sets a new absolute anchor\r\n* `get` Get absolute anchor\r\n* `clear` Clears the anchor\r\n\r\n## Events\r\n##### `change` Fires when state changes, before a new matched route/action handler is called\r\n##### `hashchange` Fires when hashtag is changed\r\n##### `parse` Fires when a URL is parsed\r\n\r\n## License\r\n##### [MIT License](http://opensource.org/licenses/MIT)\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}