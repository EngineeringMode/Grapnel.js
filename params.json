{"name":"Grapnel","tagline":"Simple, lightweight JavaScript Routerâ€”3.4kb minified!","body":"Grapnel\r\n==========\r\n\r\n#### The smallest (1100 bytes gzipped!) Client/Server-Side JavaScript Router with Named Parameters, HTML5 pushState, and Middleware support.\r\n\r\n## Download/Installation\r\n\r\n**Download Source:**\r\n\r\n- [Production](https://raw.githubusercontent.com/bytecipher/grapnel/master/dist/grapnel.min.js)\r\n- [Development](https://raw.githubusercontent.com/bytecipher/grapnel/master/src/grapnel.js)\r\n\r\n**Install with npm**\r\n```bash\r\nnpm install grapnel\r\n```\r\n**Or by using bower:**\r\n```bash\r\nbower install grapnel\r\n```\r\n**Server only:** (with HTTP methods added, [more info](https://github.com/bytecipher/grapnel/tree/server-router))\r\n```bash\r\nnpm install grapnel-server\r\n```\r\n\r\n# Grapnel Features\r\n\r\n- Supports routing using `pushState` or `hashchange` concurrently\r\n- Supports Named Parameters similar to Sinatra, Restify, and Express\r\n- Middleware Support\r\n- Works on the client or server-side\r\n- RegExp Support\r\n- RequreJS/AMD, Browserify, and CommonJS Compatibility\r\n- Supports `#` or `#!` for `hashchange` routing\r\n- Unobtrusive, supports multiple routers on the same page\r\n- No dependencies\r\n\r\n## Basic Router\r\n\r\n```javascript\r\nvar router = new Grapnel();\r\n\r\nrouter.get('products/:category/:id?', function(req){\r\n    var id = req.params.id,\r\n        category = req.params.category;\r\n    // GET http://mysite.com/#products/widgets/134\r\n    console.log(category, id);\r\n    // => widgets 134\r\n});\r\n```\r\n\r\n## Using pushState\r\n\r\n```javascript\r\nvar router = new Grapnel({ pushState : true });\r\n\r\nrouter.get('/products/:category/:id?', function(req){\r\n    var id = req.params.id,\r\n        category = req.params.category\r\n\r\n    console.log(category, id);\r\n});\r\n\r\nrouter.navigate('/products/widgets/134');\r\n// => widgets 134\r\n```\r\n\r\n## Named Parameters\r\n\r\nGrapnel supports regex style routes similar to Sinatra, Restify, and Express. The properties are mapped to the parameters in the request.\r\n```javascript\r\nrouter.get('products/:id?', function(req){\r\n    // GET /file.html#products/134\r\n    req.params.id\r\n    // => 134\r\n});\r\n\r\nrouter.get('products/*', function(req){\r\n    // The wildcard/asterisk will match anything after that point in the URL\r\n    // Parameters are provided req.params using req.params[n], where n is the nth capture\r\n});\r\n```\r\n\r\n## Middleware Support\r\n\r\nGrapnel also supports middleware:\r\n\r\n```javascript\r\nvar auth = function(req, event, next){\r\n    user.auth(function(err){\r\n        req.user = this;\r\n        next();\r\n    });\r\n}\r\n\r\nrouter.get('/*', auth, function(req){\r\n    console.log(req.user);\r\n});\r\n```\r\n\r\n## Route Context\r\n\r\nYou can add context to a route and even use it with middleware:\r\n\r\n```javascript\r\nvar usersRoute = router.context('/user/:id', getUser, getFollowers); // Middleware can be used here\r\n\r\nusersRoute('/', function(req, event){\r\n    console.log('Profile', req.params.id);\r\n});\r\n\r\nusersRoute('/followers', otherMiddleware, function(req, event){ // Middleware can be used here too\r\n    console.log('Followers', req.params.id);\r\n});\r\n\r\nrouter.navigate('/user/13589');\r\n// => Profile 13589\r\n\r\nrouter.navigate('/user/13589/followers');\r\n// => Followers 13589\r\n```\r\n\r\n## Works as a server-side router\r\n\r\n**This is now simplified as a separate package** ([more info](https://github.com/bytecipher/bytecipher/tree/server-router))\r\n```bash\r\nnpm install grapnel-server\r\n```\r\n```javascript\r\nvar http = require('http'),\r\n    app = require('grapnel-server');\r\n\r\napp.get('/', function(req, res, next){\r\n    res.end('Hello World!', 200);\r\n});\r\n\r\nhttp.createServer(app.start()).listen(3000);\r\n```\r\n\r\n## Declaring Multiple Routes\r\n\r\n```javascript\r\nvar routes = {\r\n    'products' : function(req){\r\n        // GET /file.html#products\r\n    },\r\n    'products/:category/:id?' : function(req){\r\n        // GET /file.html#products/widgets/35\r\n        req.params.category\r\n        // => widgets\r\n    }\r\n}\r\n\r\nGrapnel.listen(routes);\r\n```\r\n\r\n## Event Handling\r\n\r\n```javascript\r\nvar router = new Grapnel({ pushState : true, root : '/' });\r\n\r\nrouter.on('navigate', function(event){\r\n    // GET /foo/bar\r\n    console.log('URL changed to %s', this.path());\r\n    // => URL changed to /foo/bar\r\n});\r\n```\r\n\r\n## RegExp Support\r\n\r\nGrapnel allows RegEx when defining a route:\r\n\r\n```javascript\r\nvar expression = /^food\\/tacos\\/(.*)$/i;\r\nvar router = new Grapnel();\r\n\r\nrouter.get(expression, function(req, event){\r\n    // GET http://mysite.com/page#food/tacos/good\r\n    console.log('I think tacos are %s.', req.params[0]);\r\n    // => \"He thinks tacos are good.\"\r\n});\r\n```\r\n\r\n## RequireJS/AMD, Browserify, and CommonJS Compatibility\r\n\r\n```javascript\r\nrequire(['lib/grapnel'], function(Grapnel){\r\n\r\n    var router = new Grapnel({ pushState : true });\r\n\r\n    router.bind('navigate', function(){\r\n        console.log('It works!');\r\n    });\r\n\r\n    router.navigate('/');\r\n\r\n});\r\n```\r\n\r\n&nbsp;\r\n\r\n***\r\n\r\n# Usage &amp; Tips\r\n\r\n## Basic Configuration\r\n```javascript\r\nvar router = new Grapnel();\r\n```\r\nOr you can declare your routes with a literal object:\r\n\r\n```javascript\r\nGrapnel.listen({\r\n    'products/:id' : function(req){\r\n        // Handler\r\n    }\r\n});\r\n```\r\nWhen declaring routes with a literal object, router options can be passed as the first parameter:\r\n```javascript\r\nvar opts = { pushState : true };\r\n\r\nGrapnel.listen(opts, routes);\r\n```\r\n\r\n## Enabling PushState\r\n```javascript\r\nvar router = new Grapnel({ pushState : true });\r\n```\r\nYou can also specify a root URL by setting it as an option:\r\n\r\n```javascript\r\nvar router = new Grapnel({ root : '/public/search/', pushState : true });\r\n```\r\nThe root may require a beginning slash and a trailing slash depending on how your application utilizes the router.\r\n\r\n## Middleware\r\nGrapnel uses middleware similar to how Express uses middleware. Middleware has access to the `req` object, `event` object, and the next middleware in the call stack (commonly denoted as `next`). Middleware must call `next()` to pass control to the next middleware, otherwise the router will stop.\r\n\r\nFor more information about how middleware works, see [Using Middleware](http://expressjs.com/guide/using-middleware.html).\r\n```javascript\r\nvar user = function(req, event, next){\r\n    user.get(function(err){\r\n        req.user = this;\r\n        next();\r\n    });\r\n}\r\n\r\nrouter.get('/user/*', user, function(req){\r\n    console.log(req.user);\r\n});\r\n```\r\n\r\n## Navigation\r\nIf pushState is enabled, you can navigate through your application with `router.navigate`:\r\n```javascript\r\nrouter.navigate('/products/123');\r\n```\r\n\r\n## Stopping a Route Event\r\n```javascript\r\nrouter.on('match', function(event){\r\n    event.preventDefault(); // Stops event handler\r\n});\r\n```\r\n\r\n## Stopping Event Propagation\r\n```javascript\r\nrouter.get('/products/:id', function(req, event){\r\n    event.stopPropagation(); // Stops propagation of the event\r\n});\r\n\r\nrouter.get('/products/widgets', function(req, event){\r\n    // This will not be executed\r\n});\r\n\r\nrouter.navigate('/products/widgets');\r\n```\r\n\r\n## 404 Pages\r\nYou can specify a route that only uses a wildcard `*` as your final route, then use `event.parent()` which returns `false` if the call stack doesn't have any other routes to run.\r\n```javascript\r\nvar routes = {\r\n    '/' : function(req, e){\r\n        // Handle route\r\n    },\r\n    '/store/products/:id' : function(req, e){\r\n        // Handle route\r\n    },\r\n    '/category/:id' : function(req, e){\r\n        // Handle route\r\n    },\r\n    '/*' : function(req, e){\r\n        if(!e.parent()){\r\n            // Handle 404\r\n        }\r\n    }\r\n}\r\n\r\nGrapnel.listen({ pushState : true }, routes);\r\n```\r\n\r\n&nbsp;\r\n\r\n***\r\n\r\n# API Documentation\r\n\r\n##### `get` Adds a listeners and middleware for routes\r\n```javascript\r\n/**\r\n * @param {String|RegExp} path\r\n * @param {Function} [[middleware], callback]\r\n*/\r\nrouter.get('/store/:category/:id?', function(req, event){\r\n    var category = req.params.category,\r\n        id = req.params.id;\r\n\r\n    console.log('Product #%s in %s', id, category);\r\n});\r\n```\r\n\r\n##### `navigate` Navigate through application\r\n```javascript\r\n/**\r\n * @param {String} path relative to root\r\n*/\r\nrouter.navigate('/products/123');\r\n```\r\n\r\n##### `on` Adds a new event listener\r\n```javascript\r\n/**\r\n * @param {String} event name (multiple events can be called when separated by a space \" \")\r\n * @param {Function} callback\r\n*/\r\nrouter.on('myevent', function(event){\r\n    console.log('Grapnel works!');\r\n});\r\n```\r\n\r\n##### `once` A version of `on` except its handler will only be called once\r\n```javascript\r\n/**\r\n * @param {String} event name (multiple events can be called when separated by a space \" \")\r\n * @param {Function} callback\r\n*/\r\nrouter.once('init', function(){\r\n    console.log('This will only be executed once');\r\n});\r\n```\r\n\r\n##### `trigger` Triggers an event\r\n```javascript\r\n/**\r\n * @param {String} event name\r\n * @param {Mixed} [attributes] Parameters that will be applied to event handler\r\n*/\r\nrouter.trigger('event', eventArg1, eventArg2, etc);\r\n```\r\n\r\n##### `context` Returns a function that can be called with a specific route in context.\r\nBoth the `router.context` method and the function it returns can accept middleware. **Note: when calling `route.context`, you should omit the trailing slash.**\r\n```javascript\r\n/**\r\n * @param {String} Route context (without trailing slash)\r\n * @param {[Function]} Middleware (optional)\r\n * @return {Function} Adds route to context\r\n*/\r\nvar usersRoute = router.context('/user/:id');\r\n\r\nusersRoute('/followers', function(req, event){\r\n    console.log('Followers', req.params.id);\r\n});\r\n\r\nrouter.navigate('/user/13589/followers');\r\n// => Followers 13589\r\n```\r\n\r\n##### `path`\r\n* `router.path('string')` Sets a new path or hash\r\n* `router.path()` Gets path or hash\r\n* `router.path(false)` Clears the path or hash\r\n\r\n##### `bind` An alias of `on`\r\n##### `add` An alias of `get`\r\n##### `fragment` (Deprecated)\r\n\r\n## Options\r\n* `pushState` Enable pushState, allowing manipulation of browser history instead of using the `#` and `hashchange` event\r\n* `root` Root of your app, all navigation will be relative to this\r\n* `hashBang` Enable `#!` as the anchor of a `hashchange` router instead of using just a `#`\r\n\r\n## Events\r\n* `navigate` Fires when router navigates through history\r\n* `match` Fires when a new match is found, but before the handler is called\r\n* `hashchange` Fires when hashtag is changed\r\n\r\n## License\r\n##### [MIT License](http://opensource.org/licenses/MIT)\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}